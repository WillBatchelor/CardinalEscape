* Display
This section will describe how Cardinal Escape displays things onto the screen.
Cardinal Escape is a terminal game, so our primitives are limited to printable
ascii characters instead of pixels. Because of this, there are limits to
what we can draw, and how we can draw it.
** Resolution
First consideration is display resolution: what big will it get? The unit
we must think in is in terms of characters. In a way, characters can be
thought of as tiles. Each inidivual character can carry some semantic weight
like game tiles can. Also, they are about the same size as well!
In programming, the ideal width of a line is approximately 80 characters wide.

The line below is 80 +'s wide:

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

This is probably the maximum width we want to consider for our game.

ASCII Characters tend to be long rectangles instead of squares, so this means
the display height is going to be smaller than our width. A display height
should be no larger than 20 characters.

In conclusion, our display resolution should be no larger than 80x20, and it
should be fixed as well.
*** Checking the resolution.
The screen resolution is checked with the function =cardinal_check_resolution=.
#+NAME: function_declarations
#+BEGIN_SRC c
int cardinal_check_resolution(int min_width, int min_height);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
int cardinal_check_resolution(int min_width, int min_height)
{
    int w, h;
    getmaxyx(stdscr, h, w);

    if(w < min_width || h < min_height) return 0;
    else return 1;
}
#+END_SRC
** The Display Buffer
The outer edges of our display interface should be pretty dumb. That is to say,
it should have zero awareness of the game state, and should only be concerned
with drawing characters onto the screen. This can be done with a
=display buffer=.

A display buffer is a chunk of memory that is used to paint
characters on a screen using ncurses calls. When an aspect of the program wants
to display something on the screen, it will write to the corresponding location
in the display buffer.

The display buffer is represented as an array of *1620* chars. This number is
derived from multiplying the width (80 + 1) by the height (20).

The extra one bit is derived so that the mvprintw function can be used to write
rows to the screen (will be treated as a NULL terminator).

#+NAME: struct_contents
#+BEGIN_SRC c
char dbuf[1620];
#+END_SRC

On init-time, they are zeroed out using the function memset.
#+NAME: cardinal_init
#+BEGIN_SRC c
memset(c->dbuf, 0, 1600);
#+END_SRC
** The Top-Level Display Function
#+NAME: function_declarations
#+BEGIN_SRC c
void cardinal_display(cardinal_d *c);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
void cardinal_display(cardinal_d *c)
{
    int line;
    cardinal_display_clear(c);

    switch(c->mode) {
        case MODE_WELCOME:
            cardinal_display_print(c, 2, 1,
                                   "Welcome to Cardinal Escape! Hit any key to continue\n");
            break;
        default:
            cardinal_draw_borders(c);
            cardinal_display_message(c,
                                     "Good luck getting out of this one, nerd!");
            break;

    }
    for(line = 0; line < HEIGHT; line++) {
        mvprintw(line, 0, c->dbuf + (line * (WIDTH + 1)));
    }
    refresh();
}
#+END_SRC
** Drawing Routines
*** Display Set
The lowest level cardinal display function is the set function. This
function will set a particular character in the buffer. Included in this
function is bounds checking.

#+NAME: function_declarations
#+BEGIN_SRC c
void cardinal_display_set(cardinal_d *c, int x, int y, char a);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
void cardinal_display_set(cardinal_d *c, int x, int y, char a)
{
    if(x >= WIDTH || y >= HEIGHT) return;
    c->dbuf[(y * (WIDTH + 1)) + x] = a;
}
#+END_SRC
*** Display Print
This function will print a string on a given position. No word wrapping
happens here.

#+NAME: function_declarations
#+BEGIN_SRC c
void cardinal_display_print(cardinal_d *c, int x, int y, const char *str);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
void cardinal_display_print(cardinal_d *c, int x, int y, const char *str)
{
    int len;
    int s;
    len = strlen(str);

    for(s = 0; s < len; s++) {
        cardinal_display_set(c, x + s, y, str[s]);
    }
}
#+END_SRC
*** Display Message
A message in the dialogue window is displayed using the function
=cardinal_display_message=. Eventually, this function will automatically
break up lines at spaces.

#+NAME: function_declarations
#+BEGIN_SRC c
void cardinal_display_message(cardinal_d *c, const char *str);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c

void cardinal_display_message(cardinal_d *c, const char *str)
{
    int display_off_x;
    int display_off_y;
    int size;
    const char *buf;
    int buflen;
    int n;

    display_off_x = 41;
    display_off_y = 1;
    size = strlen(str);
    cardinal_display_print(c, display_off_x, display_off_y, str);
    buf = str;
    buf = &str[1];
    buflen = 0;
    for(n = 0; n < size; n++) {
        buflen++;
    }

}
#+END_SRC

*** Display Clear
The clear function will zero-out the display buffer.
#+NAME: function_declarations
#+BEGIN_SRC c
void cardinal_display_clear(cardinal_d *c);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
void cardinal_display_clear(cardinal_d *c)
{
    int x;
    int y;

    for(y = 0; y < HEIGHT; y++) {
        for(x = 0; x < WIDTH; x++) {
            cardinal_display_set(c, x, y, ' ');
        }
    }
}
#+END_SRC
*** Draw Border
The default borders of the game are drawn with the function
=cardinal_draw_borders=.

#+NAME: function_declarations
#+BEGIN_SRC c
void cardinal_draw_borders(cardinal_d *c);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
void cardinal_draw_borders(cardinal_d *c)
{
    int n;
    int center;
    cardinal_display_set(c, 0, 0, '+');
    cardinal_display_set(c, WIDTH - 1, 0, '+');
    cardinal_display_set(c, 0, HEIGHT - 1, '+');
    cardinal_display_set(c, WIDTH - 1, HEIGHT - 1, '+');

    for(n = 1; n < WIDTH - 1; n++) {
        cardinal_display_set(c, n, 0, '-');
        cardinal_display_set(c, n, HEIGHT - 1, '-');
    }

    center = WIDTH / 2;
    for(n = 1; n < HEIGHT - 1; n++) {
        cardinal_display_set(c, 0, n, '|');
        cardinal_display_set(c, WIDTH - 1, n, '|');
        cardinal_display_set(c, center - 1, n, '|');
        cardinal_display_set(c, center, n, '|');
    }
}
#+END_SRC
